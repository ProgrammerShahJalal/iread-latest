name: CICD TEST

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.13.1' # Specified Node.js version

      # Step 3: Cache node modules for client
      - name: Cache node modules for client
        uses: actions/cache@v4
        with:
          path: client/node_modules
          key: ${{ runner.os }}-client-${{ hashFiles('client/package-lock.json') }}
          restore-keys: ${{ runner.os }}-client-

      # Step 4: Install dependencies and build the client
      - name: Build Client
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_DATABASE }}
          DB_PORT: ${{ secrets.DB_PORT }}
        run: |
          cd client
          npm i --legacy-peer-deps
          npm run build
        continue-on-error: true # Allow the workflow to continue if the build fails for debugging

      # Step 5: Cache node modules for server
      - name: Cache node modules for server
        uses: actions/cache@v4
        with:
          path: server/node_modules
          key: ${{ runner.os }}-server-${{ hashFiles('server/package-lock.json') }}
          restore-keys: ${{ runner.os }}-server-

      # Step 6: Install dependencies and build the server
      - name: Build Server
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_DATABASE }}
          DB_PORT: ${{ secrets.DB_PORT }}
        run: |
          cd server
          npm i --legacy-peer-deps
          npm run super_admin

      # Step 7: Deploy to VPS using SSH
      - name: Deploy using SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use 22.13.1 || nvm install 22.13.1
            cd ${{ secrets.PROJECT_PATH }}
            git reset ðŸ™‚hard HEAD
            git clean -fd
            git pull origin main --prune --force || true
            cd client
            npm i --legacy-peer-deps
            npm run build
            pm2 restart client || echo "Client restart failed, check PM2 process name"
            cd ../server
            npm i --legacy-peer-deps
            npm run super_admin
            pm2 restart server || echo "Server restart failed, check PM2 process name"
